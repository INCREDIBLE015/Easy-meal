{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\react-app-recipe-api\\\\src\\\\Snackbar.js\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { setSnackbar } from \"./redux/ducks/snackbar\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2)\n    }\n  }\n}));\n\nconst CustomizedSnackbars = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const snackbarOpen = useSelector(state => state.snackbar.snackbarOpen);\n  const snackbarType = useSelector(state => state.snackbar.snackbarType);\n  const snackbarMessage = useSelector(state => state.snackbar.snackbarMessage);\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    dispatch(setSnackbar(false, snackbarType, snackbarMessage));\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(Snackbar, {\n    open: snackbarOpen,\n    autoHideDuration: 3000,\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Alert, {\n    elevation: 6,\n    variant: \"filled\",\n    onClose: handleClose,\n    color: snackbarType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, snackbarMessage)));\n};\n\nexport default CustomizedSnackbars;","map":{"version":3,"sources":["C:\\Users\\hp\\react-app-recipe-api\\src\\Snackbar.js"],"names":["React","useDispatch","useSelector","Snackbar","Alert","makeStyles","setSnackbar","useStyles","theme","root","width","marginTop","spacing","CustomizedSnackbars","classes","dispatch","snackbarOpen","state","snackbar","snackbarType","snackbarMessage","handleClose","event","reason"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA,MAAMC,SAAS,GAAGF,UAAU,CAACG,KAAK,KAAK;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,MADH;AAEJ,iBAAa;AACXC,MAAAA,SAAS,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd;AADA;AAFT;AAD+B,CAAL,CAAN,CAA5B;;AASA,MAAMC,mBAAmB,GAAG,MAAM;AAChC,QAAMC,OAAO,GAAGP,SAAS,EAAzB;AACA,QAAMQ,QAAQ,GAAGd,WAAW,EAA5B;AACA,QAAMe,YAAY,GAAGd,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeF,YAAzB,CAAhC;AACA,QAAMG,YAAY,GAAGjB,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeC,YAAzB,CAAhC;AACA,QAAMC,eAAe,GAAGlB,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeE,eAAzB,CAAnC;;AACA,QAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,QAAIA,MAAM,KAAK,WAAf,EAA4B;AAC1B;AACD;;AACDR,IAAAA,QAAQ,CAACT,WAAW,CAAC,KAAD,EAAQa,YAAR,EAAsBC,eAAtB,CAAZ,CAAR;AACD,GALD;;AAOA,SACE;AAAK,IAAA,SAAS,EAAEN,OAAO,CAACL,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEO,YADR;AAEE,IAAA,gBAAgB,EAAE,IAFpB;AAGE,IAAA,OAAO,EAAEK,WAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,KAAD;AACE,IAAA,SAAS,EAAE,CADb;AAEE,IAAA,OAAO,EAAC,QAFV;AAGE,IAAA,OAAO,EAAEA,WAHX;AAIE,IAAA,KAAK,EAAEF,YAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGC,eANH,CALF,CADF,CADF;AAkBD,CA/BD;;AAiCA,eAAeP,mBAAf","sourcesContent":["import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { setSnackbar } from \"./redux/ducks/snackbar\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2)\r\n    }\r\n  }\r\n}));\r\n\r\nconst CustomizedSnackbars = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const snackbarOpen = useSelector(state => state.snackbar.snackbarOpen);\r\n  const snackbarType = useSelector(state => state.snackbar.snackbarType);\r\n  const snackbarMessage = useSelector(state => state.snackbar.snackbarMessage);\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    dispatch(setSnackbar(false, snackbarType, snackbarMessage));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={3000}\r\n        onClose={handleClose}\r\n      >\r\n        <Alert\r\n          elevation={6}\r\n          variant=\"filled\"\r\n          onClose={handleClose}\r\n          color={snackbarType}\r\n        >\r\n          {snackbarMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomizedSnackbars;\r\n"]},"metadata":{},"sourceType":"module"}